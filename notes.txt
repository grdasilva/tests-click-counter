Types of tests

- unit (tests one piece of code);
- integration (how multiple units work together);
- end-to-end (user experience on browser and connections to server);
- functional (focuses on user flow).

--------------------------------------------------------------------------------------------------------

Information of tests

- test behavior, not implementation (what the app should do);
- easy diagnosis of failed test;

- Code-based (implementation)
=> ease of diagnosis;
=> brittle tests.

- functional (bahavioral)
=> more rebusts tests;
=> more difficult to find out what caused the failures.

- data-test attribute
=> top level element of component;
=> id and class have uses in production app and can be changed
=> data-test is only for testing

- remove data-test attribute (https://www.npmjs.com/package/babel-plugin-react-remove-properties)
=> npm i --save-dev babel-plugin-react-remove-properties (to remove properties on build)
=> npm run eject (now we can change app config)
=> update babel config (putting an env with production plugin removing data-test)
=> npm run build (create an production build)
=> data-test attributes are gone

--------------------------------------------------------------------------------------------------------

Enzyme (https://enzymejs.github.io/enzyme/)

- we need to use an adapter to configure the Enzyme ( Enzyme.configure({ adapter: NAME_ADAPTER }) );
- shallow to render an specific component without children;
- using shallow you can use .debug() to search where is the problem;
- .exists returns whether or not the current node exists;
- .find can find every node in DOM tree;

--------------------------------------------------------------------------------------------------------

Jest (https://jestjs.io/pt-BR/)

- toBe checks that a value is what you expect; 

--------------------------------------------------------------------------------------------------------

Examples Enzyme + Jest

- expect(wrapper.exists()).toBe(true);

