Types of tests

- unit (tests one piece of code);
- integration (how multiple units work together);
- end-to-end (user experience on browser and connections to server);
- functional (focuses on user flow).

--------------------------------------------------------------------------------------------------------

Information of tests

- test behavior, not implementation (what the app should do);
- easy diagnosis of failed test;
- write only one assertion for test, because: 
=> test description provide better documentation
=> failure counts give better indication of state of code, test stops at first failure

- Code-based (implementation)
=> ease of diagnosis;
=> brittle tests.

- functional (bahavioral)
=> more rebusts tests;
=> more difficult to find out what caused the failures.

- data-test attribute
=> top level element of component;
=> id and class have uses in production app and can be changed
=> data-test is only for testing

- remove data-test attribute (https://www.npmjs.com/package/babel-plugin-react-remove-properties)
=> npm i --save-dev babel-plugin-react-remove-properties (to remove properties on build)
=> npm run eject (now we can change app config)
=> update babel config (putting an env with production plugin removing data-test)
=> npm run build (create an production build)
=> data-test attributes are gone

--------------------------------------------------------------------------------------------------------

Enzyme (https://enzymejs.github.io/enzyme/)

- we need to use an adapter to configure the Enzyme ( Enzyme.configure({ adapter: NAME_ADAPTER }) );
- shallow to render an specific component without children;
- using shallow you can use .debug() to search where is the problem;
- .exists returns whether or not the current node exists;
- .find can find every node in DOM tree;

--------------------------------------------------------------------------------------------------------

Jest (https://jestjs.io/pt-BR/)

- toBe checks that a value is what you expect; 

--------------------------------------------------------------------------------------------------------

Examples Enzyme + Jest

- expect(wrapper.exists()).toBe(true);

--------------------------------------------------------------------------------------------------------

Challenges 

Click Counter Challenge Descriptions
1. Decrement button
Create a new button that subtracts 1 from the counter

2. No count below 0
Don't let the counter go below zero.

if the counter is at 0 and the decrement button is clicked:

don't decrement the counter

display an error message saying the counter can't go below zero

3. Remove error when increment button is clicked
If error is showing and increment button is clicked, clear the error.